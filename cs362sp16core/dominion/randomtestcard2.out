
*****Random test for smithy******
Error  Time
1       0
2       0
****** Random test done ********
Function 'compare'
Lines executed:100.00% of 6
Branches executed:100.00% of 4
Taken at least once:100.00% of 4
No calls

Function 'newGame'
Lines executed:0.00% of 2
No branches
No calls

Function 'kingdomCards'
Lines executed:0.00% of 12
No branches
No calls

Function 'initializeGame'
Lines executed:96.15% of 78
Branches executed:100.00% of 46
Taken at least once:91.30% of 46
No calls

Function 'shuffle'
Lines executed:100.00% of 18
Branches executed:100.00% of 8
Taken at least once:100.00% of 8
No calls

Function 'playCard'
Lines executed:0.00% of 14
Branches executed:0.00% of 10
Taken at least once:0.00% of 10
No calls

Function 'buyCard'
Lines executed:0.00% of 13
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
No calls

Function 'numHandCards'
Lines executed:100.00% of 1
No branches
No calls

Function 'handCard'
Lines executed:0.00% of 2
No branches
No calls

Function 'supplyCount'
Lines executed:0.00% of 1
No branches
No calls

Function 'fullDeckCount'
Lines executed:81.82% of 11
Branches executed:83.33% of 12
Taken at least once:58.33% of 12
No calls

Function 'whoseTurn'
Lines executed:100.00% of 1
No branches
No calls

Function 'endTurn'
Lines executed:0.00% of 22
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
No calls

Function 'isGameOver'
Lines executed:0.00% of 12
Branches executed:0.00% of 8
Taken at least once:0.00% of 8
No calls

Function 'scoreFor'
Lines executed:0.00% of 26
Branches executed:0.00% of 42
Taken at least once:0.00% of 42
No calls

Function 'getWinners'
Lines executed:0.00% of 33
Branches executed:0.00% of 22
Taken at least once:0.00% of 22
No calls

Function 'drawCard'
Lines executed:95.83% of 24
Branches executed:100.00% of 6
Taken at least once:83.33% of 6
No calls

Function 'getCost'
Lines executed:16.67% of 30
Branches executed:100.00% of 28
Taken at least once:10.71% of 28
No calls

Function 'cardEffect'
Lines executed:10.57% of 246
Branches executed:15.61% of 173
Taken at least once:6.36% of 173
No calls

Function 'discardCard'
Lines executed:73.33% of 15
Branches executed:100.00% of 6
Taken at least once:66.67% of 6
No calls

Function 'gainCard'
Lines executed:0.00% of 15
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
No calls

Function 'updateCoins'
Lines executed:71.43% of 14
Branches executed:100.00% of 8
Taken at least once:75.00% of 8
No calls

Function 'adventurer_function'
Lines executed:100.00% of 16
Branches executed:100.00% of 12
Taken at least once:100.00% of 12
No calls

Function 'council_room_function'
Lines executed:100.00% of 8
Branches executed:100.00% of 6
Taken at least once:100.00% of 6
No calls

Function 'remodel_function'
Lines executed:0.00% of 12
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
No calls

Function 'smithy_function'
Lines executed:100.00% of 4
Branches executed:100.00% of 2
Taken at least once:100.00% of 2
No calls

Function 'village_function'
Lines executed:0.00% of 4
No branches
No calls

File 'dominion.c'
Lines executed:33.28% of 640
Branches executed:39.09% of 417
Taken at least once:26.38% of 417
No calls
dominion.c:creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:11
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 338627 returned 100% blocks executed 100%
        -:    8:int compare(const void* a, const void* b) {
   338627:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 10%
branch  1 taken 90%
    32943:   10:    return 1;
   305684:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 41%
branch  1 taken 59%
   123814:   12:    return -1;
   181870:   13:  return 0;
   338627:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
        -:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
        -:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 6007 returned 100% blocks executed 95%
        -:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
     6007:   44:  SelectStream(1);
     6007:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
    12014:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 100%
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
     6007:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
   132154:   57:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9%
        -:   58:    {
  1321540:   59:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9%
        -:   60:        {
  1141330:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90%
branch  1 taken 10%
branch  2 taken 0%
branch  3 taken 100%
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
   600700:   65:        }
    60070:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
     6007:   73:  if (numPlayers == 2)
branch  0 taken 33%
branch  1 taken 67%
        -:   74:    {
     1990:   75:      state->supplyCount[curse] = 10;
     1990:   76:    }
     4017:   77:  else if (numPlayers == 3)
branch  0 taken 50%
branch  1 taken 50%
        -:   78:    {
     2008:   79:      state->supplyCount[curse] = 20;
     2008:   80:    }
        -:   81:  else
        -:   82:    {
     2009:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
     6007:   87:  if (numPlayers == 2)
branch  0 taken 33%
branch  1 taken 67%
        -:   88:    {
     1990:   89:      state->supplyCount[estate] = 8;
     1990:   90:      state->supplyCount[duchy] = 8;
     1990:   91:      state->supplyCount[province] = 8;
     1990:   92:    }
        -:   93:  else
        -:   94:    {
     4017:   95:      state->supplyCount[estate] = 12;
     4017:   96:      state->supplyCount[duchy] = 12;
     4017:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
     6007:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
     6007:  102:  state->supplyCount[silver] = 40;
     6007:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
   252294:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5%
        -:  107:    {
  1982310:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6%
        -:  109:	{
   931085:  110:	  if (kingdomCards[j] == i)
branch  0 taken 6%
branch  1 taken 94%
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
   120136:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 99%
branch  1 taken 1%
branch  2 taken 10%
branch  3 taken 90%
        -:  114:		{
     6011:  115:		  if (numPlayers == 2){ 
branch  0 taken 33%
branch  1 taken 67%
     1994:  116:		    state->supplyCount[i] = 8; 
     1994:  117:		  }
     4017:  118:		  else{ state->supplyCount[i] = 12; }
     6011:  119:		}
        -:  120:	      else
        -:  121:		{
    54059:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
    60070:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
   871015:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
   871015:  130:	}
        -:  131:
   120140:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
    48094:  138:  for (i = 0; i < numPlayers; i++)
branch  0 taken 75%
branch  1 taken 25%
        -:  139:    {
    18040:  140:      state->deckCount[i] = 0;
   144320:  141:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25%
        -:  142:	{
    54120:  143:	  state->deck[i][j] = estate;
    54120:  144:	  state->deckCount[i]++;
    54120:  145:	}
   288640:  146:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13%
        -:  147:	{
   126280:  148:	  state->deck[i][j] = copper;
   126280:  149:	  state->deckCount[i]++;		
   126280:  150:	}
    18040:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
    48094:  154:  for (i = 0; i < numPlayers; i++)
branch  0 taken 75%
branch  1 taken 25%
        -:  155:    {
    18040:  156:      if ( shuffle(i, state) < 0 )
branch  0 taken 0%
branch  1 taken 100%
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
    18040:  160:    }
        -:  161:
        -:  162:  //draw player hands
    48094:  163:  for (i = 0; i < numPlayers; i++)
branch  0 taken 75%
branch  1 taken 25%
        -:  164:    {  
        -:  165:      //initialize hand size to zero
    18040:  166:      state->handCount[i] = 0;
    18040:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
    18040:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
   336392:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4%
        -:  177:    {
   162189:  178:      state->embargoTokens[i] = 0;
   162189:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
     6007:  182:  state->outpostPlayed = 0;
     6007:  183:  state->phase = 0;
     6007:  184:  state->numActions = 1;
     6007:  185:  state->numBuys = 1;
     6007:  186:  state->playedCardCount = 0;
     6007:  187:  state->whoseTurn = 0;
     6007:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
    72084:  192:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17%
    30035:  193:    drawCard(state->whoseTurn, state);
    30035:  194:  }
        -:  195:
     6007:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
     6007:  198:  return 0;
     6007:  199:}
        -:  200:
function shuffle called 18192 returned 100% blocks executed 100%
        -:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
    18192:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
    18192:  209:  if (state->deckCount[player] < 1)
branch  0 taken 1%
branch  1 taken 99%
       69:  210:    return -1;
    18123:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
   434452:  214:  while (state->deckCount[player] > 0) {
branch  0 taken 92%
branch  1 taken 8%
   199103:  215:    card = floor(Random() * state->deckCount[player]);
   199103:  216:    newDeck[newDeckPos] = state->deck[player][card];
   199103:  217:    newDeckPos++;
  3432042:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 88%
branch  1 taken 12%
  1516918:  219:      state->deck[player][i] = state->deck[player][i+1];
  1516918:  220:    }
   199103:  221:    state->deckCount[player]--;
        -:  222:  }
   434452:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 92%
branch  1 taken 8%
   199103:  224:    state->deck[player][i] = newDeck[i];
   199103:  225:    state->deckCount[player]++;
   199103:  226:  }
        -:  227:
    18123:  228:  return 0;
    18192:  229:}
        -:  230:
function playCard called 0 returned 0% blocks executed 0%
        -:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
branch  0 never executed
branch  1 never executed
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:	
    #####:  269:  return 0;
    #####:  270:}
        -:  271:
function buyCard called 0 returned 0% blocks executed 0%
        -:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
branch  0 never executed
branch  1 never executed
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
branch  0 never executed
branch  1 never executed
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
    #####:  309:}
        -:  310:
function numHandCards called 11347 returned 100% blocks executed 100%
        -:  311:int numHandCards(struct gameState *state) {
    11347:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
function handCard called 0 returned 0% blocks executed 0%
        -:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 0 returned 0% blocks executed 0%
        -:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 1 returned 100% blocks executed 70%
        -:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
        1:  326:  int count = 0;
        -:  327:
       12:  328:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17%
        -:  329:    {
        5:  330:      if (state->deck[player][i] == card) count++;
branch  0 taken 0%
branch  1 taken 100%
        5:  331:    }
        -:  332:
       12:  333:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17%
        -:  334:    {
        5:  335:      if (state->hand[player][i] == card) count++;
branch  0 taken 0%
branch  1 taken 100%
        5:  336:    }
        -:  337:
        2:  338:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 0%
branch  1 taken 100%
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
    #####:  341:    }
        -:  342:
        1:  343:  return count;
        -:  344:}
        -:  345:
function whoseTurn called 17353 returned 100% blocks executed 100%
        -:  346:int whoseTurn(struct gameState *state) {
    17353:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 0 returned 0% blocks executed 0%
        -:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
    #####:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 never executed
branch  1 never executed
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
    #####:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
    #####:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 0 returned 0% blocks executed 0%
        -:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
branch  0 never executed
branch  1 never executed
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
branch  0 never executed
branch  1 never executed
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
branch  0 never executed
branch  1 never executed
        -:  405:	{
    #####:  406:	  j++;
    #####:  407:	}
    #####:  408:    }
    #####:  409:  if ( j >= 3)
branch  0 never executed
branch  1 never executed
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
    #####:  415:}
        -:  416:
function scoreFor called 0 returned 0% blocks executed 0%
        -:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
    #####:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
    #####:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
    #####:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
        -:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
    #####:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
    #####:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
    #####:  484:	}
    #####:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
    #####:  495:	}
    #####:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
    #####:  505:	}
    #####:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
    #####:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
    #####:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
function drawCard called 72352 returned 100% blocks executed 91%
        -:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
    72352:  528:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 1%
branch  1 taken 99%
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    37572:  533:    for (i = 0; i < state->discardCount[player];i++){
branch  0 taken 99%
branch  1 taken 1%
    18703:  534:      state->deck[player][i] = state->discard[player][i];
    18703:  535:      state->discard[player][i] = -1;
    18703:  536:    }
        -:  537:
       83:  538:    state->deckCount[player] = state->discardCount[player];
       83:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
       83:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
       83:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
       83:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
       83:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
       83:  559:    if (deckCounter == 0)
branch  0 taken 0%
branch  1 taken 100%
    #####:  560:      return -1;
        -:  561:
       83:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
       83:  563:    state->deckCount[player]--;
       83:  564:    state->handCount[player]++;//Increment hand count
       83:  565:  }
        -:  566:
        -:  567:  else{
    72269:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
    72269:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
    72269:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
    72269:  576:    state->deckCount[player]--;
    72269:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
    72352:  580:  return 0;
    72352:  581:}
        -:  582:
function getCost called 3 returned 100% blocks executed 19%
        -:  583:int getCost(int cardNumber)
        -:  584:{
        3:  585:  switch( cardNumber ) 
branch  0 taken 33%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 0%
branch  7 taken 33%
branch  8 taken 0%
branch  9 taken 33%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
branch 21 taken 0%
branch 22 taken 0%
branch 23 taken 0%
branch 24 taken 0%
branch 25 taken 0%
branch 26 taken 0%
branch 27 taken 0%
        -:  586:    {
        -:  587:    case curse:
        1:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
        1:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
        1:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        3:  644:}
        -:  645:
function cardEffect called 6006 returned 100% blocks executed 7%
        -:  646:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  647:{
        -:  648:  int i;
        -:  649:  int j;
        -:  650:  int k;
        -:  651:  int x;
        -:  652:  int index;
     6006:  653:  int currentPlayer = whoseTurn(state);
     6006:  654:  int nextPlayer = currentPlayer + 1;
        -:  655:  int temphand[MAX_HAND];
     6006:  656:  int tributeRevealedCards[2] = {-1, -1};
        -:  657:  
     6006:  658:if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 37%
branch  1 taken 63%
     2208:  659:    nextPlayer = 0;
     2208:  660:  }
        -:  661:  
        -:  662:	
        -:  663:  //uses switch to select card and perform actions
     6006:  664:  switch( card ){
branch  0 taken 33%
branch  1 taken 1%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 33%
branch  7 taken 0%
branch  8 taken 0%
branch  9 taken 1%
branch 10 taken 0%
branch 11 taken 33%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  665:    case adventurer:
     2000:  666:		return adventurer_function(state, currentPlayer); 			// This is one of my refactor functions, and definition of it is in the end of program
        -:  667:	
        -:  668:	case council_room:
        1:  669:		return council_room_function(state, currentPlayer, handPos);     // This is one of my refactor functions, and definition of it is in the end of program
        -:  670:			
        -:  671:
        -:  672:    case feast:
        -:  673:      //gain card with cost up to 5
        -:  674:      //Backup hand
    #####:  675:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  676:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  677:	state->hand[currentPlayer][i] = -1;//Set to nothing
    #####:  678:      }
        -:  679:      //Backup hand
        -:  680:
        -:  681:      //Update Coins for Buy
    #####:  682:      updateCoins(currentPlayer, state, 5);
    #####:  683:      x = 1;//Condition to loop on
    #####:  684:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  685:	if (supplyCount(choice1, state) <= 0){
branch  0 never executed
branch  1 never executed
        -:  686:	  if (DEBUG)
        -:  687:	    printf("None of that card left, sorry!\n");
    #####:  688:			return -1;
        -:  689:	  if (DEBUG){
        -:  690:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  691:	  		return -1;
        -:  692:		}
        -:  693:	}
    #####:  694:	else if (state->coins < getCost(choice1)){
branch  0 never executed
branch  1 never executed
    #####:  695:	  printf("That card is too expensive!\n");
    #####:  696:			return -1;
        -:  697:	  if (DEBUG){
        -:  698:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  699:	  }
        -:  700:	}
        -:  701:	else{
        -:  702:
        -:  703:	  if (DEBUG){
        -:  704:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  705:	  }
        -:  706:
    #####:  707:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  708:	  x = 0;//No more buying cards
        -:  709:
        -:  710:	  if (DEBUG){
        -:  711:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  712:	  }
        -:  713:
        -:  714:	}
        -:  715:      }     
        -:  716:
        -:  717:      //Reset Hand
    #####:  718:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  719:	state->hand[currentPlayer][i] = temphand[i];
    #####:  720:	temphand[i] = -1;
    #####:  721:      }
        -:  722:      //Reset Hand
        -:  723:      			
    #####:  724:      return 0;
        -:  725:			
        -:  726:    case gardens:
    #####:  727:      return -1;
        -:  728:			
        -:  729:    case mine:
    #####:  730:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  731:
    #####:  732:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  733:	{
    #####:  734:	  return -1;
        -:  735:	}
        -:  736:		
    #####:  737:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  738:	{
    #####:  739:	  return -1;
        -:  740:	}
        -:  741:
    #####:  742:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
branch  0 never executed
branch  1 never executed
        -:  743:	{
    #####:  744:	  return -1;
        -:  745:	}
        -:  746:
    #####:  747:      gainCard(choice2, state, 2, currentPlayer);
        -:  748:
        -:  749:      //discard card from hand
    #####:  750:      discardCard(handPos, currentPlayer, state, 0);
        -:  751:
        -:  752:      //discard trashed card
    #####:  753:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  754:	{
    #####:  755:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  756:	    {
    #####:  757:	      discardCard(i, currentPlayer, state, 0);			
    #####:  758:	      break;
        -:  759:	    }
    #####:  760:	}
        -:  761:			
    #####:  762:      return 0;
        -:  763:    
        -:  764:	case remodel:
    #####:  765:    	return remodel_function(choice1, choice2, state, currentPlayer, handPos);   // This is one of my refactor functions, and definition of it is in the end of program
        -:  766:
        -:  767:	case smithy:
     2001:  768:		return smithy_function(state, currentPlayer, handPos);						 // This is one of my refactor functions, and definition of it is in the end of program
        -:  769:			
        -:  770:	case village:
    #####:  771:		return village_function(state, currentPlayer, handPos);						 // This is one of my refactor functions, and definition of it is in the end of program
        -:  772:
        -:  773:	case baron:
    #####:  774:      state->numBuys++;//Increase buys by 1!
    #####:  775:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  776:	int p = 0;//Iterator for hand!
    #####:  777:	int card_not_discarded = 1;//Flag for discard set!
    #####:  778:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  779:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  780:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  781:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  782:	    state->discardCount[currentPlayer]++;
    #####:  783:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  784:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
    #####:  785:	    }
    #####:  786:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  787:	    state->handCount[currentPlayer]--;
    #####:  788:	    card_not_discarded = 0;//Exit the loop
    #####:  789:	  }
    #####:  790:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  791:	    if(DEBUG) {
        -:  792:	      printf("No estate cards in your hand, invalid choice\n");
        -:  793:	      printf("Must gain an estate if there are any\n");
        -:  794:	    }
    #####:  795:	    if (supplyCount(estate, state) > 0){
branch  0 never executed
branch  1 never executed
    #####:  796:	      gainCard(estate, state, 0, currentPlayer);
    #####:  797:	      state->supplyCount[estate]--;//Decrement estates
    #####:  798:	      if (supplyCount(estate, state) == 0){
branch  0 never executed
branch  1 never executed
    #####:  799:		isGameOver(state);
    #####:  800:	      }
    #####:  801:	    }
    #####:  802:	    card_not_discarded = 0;//Exit the loop
    #####:  803:	  }
        -:  804:			    
        -:  805:	  else{
    #####:  806:	    p++;//Next card
        -:  807:	  }
        -:  808:	}
    #####:  809:      }
        -:  810:			    
        -:  811:      else{
    #####:  812:	if (supplyCount(estate, state) > 0){
branch  0 never executed
branch  1 never executed
    #####:  813:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  814:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  815:	  if (supplyCount(estate, state) == 0){
branch  0 never executed
branch  1 never executed
    #####:  816:	    isGameOver(state);
    #####:  817:	  }
    #####:  818:	}
        -:  819:      }
        -:  820:	    
        -:  821:      
    #####:  822:      return 0;
        -:  823:		
        -:  824:    case great_hall:
        1:  825:      drawCard(currentPlayer, state);
        -:  826:			
        -:  827:      //+1 Actions
        1:  828:      state->numActions++;
        -:  829:			
        -:  830:      //discard card from hand
        1:  831:      discardCard(handPos, currentPlayer, state, 0);
        1:  832:      return 0;
        -:  833:		
        -:  834:    case minion:
        -:  835:      //+1 action
    #####:  836:      state->numActions++;
        -:  837:			
        -:  838:      //discard card from hand
    #####:  839:      discardCard(handPos, currentPlayer, state, 0);
        -:  840:			
    #####:  841:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  842:	{
    #####:  843:	  state->coins = state->coins + 2;
    #####:  844:	}
        -:  845:			
    #####:  846:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  847:	{
        -:  848:	  //discard hand
    #####:  849:	  while(numHandCards(state) > 0)
branch  0 never executed
branch  1 never executed
        -:  850:	    {
    #####:  851:	      discardCard(handPos, currentPlayer, state, 0);
        -:  852:	    }
        -:  853:				
        -:  854:	  //draw 4
    #####:  855:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  856:	    {
    #####:  857:	      drawCard(currentPlayer, state);
    #####:  858:	    }
        -:  859:				
        -:  860:	  //other players discard hand and redraw if hand size > 4
    #####:  861:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  862:	    {
    #####:  863:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  864:		{
    #####:  865:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  866:		    {
        -:  867:		      //discard hand
    #####:  868:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  869:			{
    #####:  870:			  discardCard(handPos, i, state, 0);
        -:  871:			}
        -:  872:							
        -:  873:		      //draw 4
    #####:  874:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -:  875:			{
    #####:  876:			  drawCard(i, state);
    #####:  877:			}
    #####:  878:		    }
    #####:  879:		}
    #####:  880:	    }
        -:  881:				
    #####:  882:	}
    #####:  883:      return 0;
        -:  884:		
        -:  885:    case steward:
     2003:  886:      if (choice1 == 1)
branch  0 taken 32%
branch  1 taken 68%
        -:  887:	{
        -:  888:	  //+2 cards
      639:  889:	  drawCard(currentPlayer, state);
      639:  890:	  drawCard(currentPlayer, state);
      639:  891:	}
     1364:  892:      else if (choice1 == 2)
branch  0 taken 49%
branch  1 taken 51%
        -:  893:	{
        -:  894:	  //+2 coins
      668:  895:	  state->coins = state->coins + 2;
      668:  896:	}
        -:  897:      else
        -:  898:	{
        -:  899:	  //trash 2 cards in hand
      696:  900:	  discardCard(choice2, currentPlayer, state, 1);
      696:  901:	  discardCard(choice3, currentPlayer, state, 1);
        -:  902:	}
        -:  903:			
        -:  904:      //discard card from hand
     2003:  905:      discardCard(handPos, currentPlayer, state, 0);
     2003:  906:      return 0;
        -:  907:		
        -:  908:    case tribute:
    #####:  909:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####:  910:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  911:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  912:	  state->deckCount[nextPlayer]--;
    #####:  913:	}
    #####:  914:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  915:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  916:	  state->discardCount[nextPlayer]--;
    #####:  917:	}
        -:  918:	else{
        -:  919:	  //No Card to Reveal
        -:  920:	  if (DEBUG){
        -:  921:	    printf("No cards to reveal\n");
        -:  922:	  }
        -:  923:	}
    #####:  924:      }
        -:  925:	    
        -:  926:      else{
    #####:  927:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####:  928:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  929:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  930:	    state->deckCount[nextPlayer]++;
    #####:  931:	    state->discard[nextPlayer][i] = -1;
    #####:  932:	    state->discardCount[nextPlayer]--;
    #####:  933:	  }
        -:  934:			    
    #####:  935:	  shuffle(nextPlayer,state);//Shuffle the deck
    #####:  936:	} 
    #####:  937:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  938:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  939:	state->deckCount[nextPlayer]--;
    #####:  940:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  941:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  942:	state->deckCount[nextPlayer]--;
        -:  943:      }    
        -:  944:		       
    #####:  945:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####:  946:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  947:	state->playedCardCount++;
    #####:  948:	tributeRevealedCards[1] = -1;
    #####:  949:      }
        -:  950:
    #####:  951:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####:  952:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  953:	  state->coins += 2;
    #####:  954:	}
        -:  955:		    
    #####:  956:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####:  957:	  drawCard(currentPlayer, state);
    #####:  958:	  drawCard(currentPlayer, state);
    #####:  959:	}
        -:  960:	else{//Action Card
    #####:  961:	  state->numActions = state->numActions + 2;
        -:  962:	}
    #####:  963:      }
        -:  964:	    
    #####:  965:      return 0;
        -:  966:		
        -:  967:    case ambassador:
    #####:  968:      j = 0;		//used to check if player has enough cards to discard
        -:  969:
    #####:  970:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  971:	{
    #####:  972:	  return -1;				
        -:  973:	}
        -:  974:
    #####:  975:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -:  976:	{
    #####:  977:	  return -1;
        -:  978:	}
        -:  979:
    #####:  980:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  981:	{
    #####:  982:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -:  983:	    {
    #####:  984:	      j++;
    #####:  985:	    }
    #####:  986:	}
    #####:  987:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -:  988:	{
    #####:  989:	  return -1;				
        -:  990:	}
        -:  991:
        -:  992:      if (DEBUG) 
        -:  993:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -:  994:
        -:  995:      //increase supply count for choosen card by amount being discarded
    #####:  996:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -:  997:			
        -:  998:      //each other player gains a copy of revealed card
    #####:  999:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1000:	{
    #####: 1001:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1002:	    {
    #####: 1003:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    #####: 1004:	    }
    #####: 1005:	}
        -: 1006:
        -: 1007:      //discard played card from hand
    #####: 1008:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1009:
        -: 1010:      //trash copies of cards returned to supply
    #####: 1011:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1012:	{
    #####: 1013:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1014:	    {
    #####: 1015:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1016:		{
    #####: 1017:		  discardCard(i, currentPlayer, state, 1);
    #####: 1018:		  break;
        -: 1019:		}
    #####: 1020:	    }
    #####: 1021:	}			
        -: 1022:
    #####: 1023:      return 0;
        -: 1024:		
        -: 1025:    case cutpurse:
        -: 1026:
    #####: 1027:      updateCoins(currentPlayer, state, 2);
    #####: 1028:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1029:	{
    #####: 1030:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1031:	    {
    #####: 1032:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1033:		{
    #####: 1034:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1035:		    {
    #####: 1036:		      discardCard(j, i, state, 0);
    #####: 1037:		      break;
        -: 1038:		    }
    #####: 1039:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1040:		    {
    #####: 1041:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1042:			{
        -: 1043:			  if (DEBUG)
        -: 1044:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
    #####: 1045:			}	
    #####: 1046:		      break;
        -: 1047:		    }		
    #####: 1048:		}
        -: 1049:					
    #####: 1050:	    }
        -: 1051:				
    #####: 1052:	}				
        -: 1053:
        -: 1054:      //discard played card from hand
    #####: 1055:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1056:
    #####: 1057:      return 0;
        -: 1058:
        -: 1059:		
        -: 1060:    case embargo: 
        -: 1061:      //+2 Coins
    #####: 1062:      state->coins = state->coins + 2;
        -: 1063:			
        -: 1064:      //see if selected pile is in play
    #####: 1065:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1066:	{
    #####: 1067:	  return -1;
        -: 1068:	}
        -: 1069:			
        -: 1070:      //add embargo token to selected supply pile
    #####: 1071:      state->embargoTokens[choice1]++;
        -: 1072:			
        -: 1073:      //trash card
    #####: 1074:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1075:      return 0;
        -: 1076:		
        -: 1077:    case outpost:
        -: 1078:      //set outpost flag
    #####: 1079:      state->outpostPlayed++;
        -: 1080:			
        -: 1081:      //discard card
    #####: 1082:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1083:      return 0;
        -: 1084:		
        -: 1085:    case salvager:
        -: 1086:      //+1 buy
    #####: 1087:      state->numBuys++;
        -: 1088:			
    #####: 1089:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1090:	{
        -: 1091:	  //gain coins equal to trashed card
    #####: 1092:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1093:	  //trash card
    #####: 1094:	  discardCard(choice1, currentPlayer, state, 1);	
    #####: 1095:	}
        -: 1096:			
        -: 1097:      //discard card
    #####: 1098:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1099:      return 0;
        -: 1100:		
        -: 1101:    case sea_hag:
    #####: 1102:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1103:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1104:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1105:	  state->discardCount[i]++;
    #####: 1106:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    #####: 1107:	}
    #####: 1108:      }
    #####: 1109:      return 0;
        -: 1110:		
        -: 1111:    case treasure_map:
        -: 1112:      //search hand for another treasure_map
    #####: 1113:      index = -1;
    #####: 1114:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1115:	{
    #####: 1116:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1117:	    {
    #####: 1118:	      index = i;
    #####: 1119:	      break;
        -: 1120:	    }
    #####: 1121:	}
    #####: 1122:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1123:	{
        -: 1124:	  //trash both treasure cards
    #####: 1125:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1126:	  discardCard(index, currentPlayer, state, 1);
        -: 1127:
        -: 1128:	  //gain 4 Gold cards
    #####: 1129:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1130:	    {
    #####: 1131:	      gainCard(gold, state, 1, currentPlayer);
    #####: 1132:	    }
        -: 1133:				
        -: 1134:	  //return success
    #####: 1135:	  return 1;
        -: 1136:	}
        -: 1137:			
        -: 1138:      //no second treasure_map found in hand
    #####: 1139:      return -1;
        -: 1140:    }
        -: 1141:	
    #####: 1142:  return -1;
     6006: 1143:}
        -: 1144:
function discardCard called 5399 returned 100% blocks executed 80%
        -: 1145:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1146:{
        -: 1147:	
        -: 1148:  //if card is not trashed, added to Played pile 
     5399: 1149:  if (trashFlag < 1)
branch  0 taken 74%
branch  1 taken 26%
        -: 1150:    {
        -: 1151:      //add card to played pile
     4007: 1152:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
     4007: 1153:      state->playedCardCount++;
     4007: 1154:    }
        -: 1155:	
        -: 1156:  //set played card to -1
     5399: 1157:  state->hand[currentPlayer][handPos] = -1;
        -: 1158:	
        -: 1159:  //remove card from player's hand
     5399: 1160:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 0%
branch  1 taken 100%
        -: 1161:    {
        -: 1162:      //reduce number of cards in hand
    #####: 1163:      state->handCount[currentPlayer]--;
    #####: 1164:    }
     5399: 1165:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0%
branch  1 taken 100%
        -: 1166:    {
        -: 1167:      //reduce number of cards in hand
    #####: 1168:      state->handCount[currentPlayer]--;
    #####: 1169:    }
        -: 1170:  else 	
        -: 1171:    {
        -: 1172:      //replace discarded card with last card in hand
     5399: 1173:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1174:      //set last card to -1
     5399: 1175:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1176:      //reduce number of cards in hand
     5399: 1177:      state->handCount[currentPlayer]--;
        -: 1178:    }
        -: 1179:	
     5399: 1180:  return 0;
        -: 1181:}
        -: 1182:
function gainCard called 0 returned 0% blocks executed 0%
        -: 1183:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1184:{
        -: 1185:  //Note: supplyPos is enum of choosen card
        -: 1186:	
        -: 1187:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1188:  if ( supplyCount(supplyPos, state) < 1 )
branch  0 never executed
branch  1 never executed
        -: 1189:    {
    #####: 1190:      return -1;
        -: 1191:    }
        -: 1192:	
        -: 1193:  //added card for [whoseTurn] current player:
        -: 1194:  // toFlag = 0 : add to discard
        -: 1195:  // toFlag = 1 : add to deck
        -: 1196:  // toFlag = 2 : add to hand
        -: 1197:
    #####: 1198:  if (toFlag == 1)
branch  0 never executed
branch  1 never executed
        -: 1199:    {
    #####: 1200:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1201:      state->deckCount[player]++;
    #####: 1202:    }
    #####: 1203:  else if (toFlag == 2)
branch  0 never executed
branch  1 never executed
        -: 1204:    {
    #####: 1205:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1206:      state->handCount[player]++;
    #####: 1207:    }
        -: 1208:  else
        -: 1209:    {
    #####: 1210:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1211:      state->discardCount[player]++;
        -: 1212:    }
        -: 1213:	
        -: 1214:  //decrease number in supply pile
    #####: 1215:  state->supplyCount[supplyPos]--;
        -: 1216:	 
    #####: 1217:  return 0;
    #####: 1218:}
        -: 1219:
function updateCoins called 6007 returned 100% blocks executed 85%
        -: 1220:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1221:{
        -: 1222:  int i;
        -: 1223:	
        -: 1224:  //reset coin count
     6007: 1225:  state->coins = 0;
        -: 1226:
        -: 1227:  //add coins for each Treasure card in player's hand
    72084: 1228:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17%
        -: 1229:    {
    30035: 1230:      if (state->hand[player][i] == copper)
branch  0 taken 60%
branch  1 taken 40%
        -: 1231:	{
    18021: 1232:	  state->coins += 1;
    18021: 1233:	}
    12014: 1234:      else if (state->hand[player][i] == silver)
branch  0 taken 0%
branch  1 taken 100%
        -: 1235:	{
    #####: 1236:	  state->coins += 2;
    #####: 1237:	}
    12014: 1238:      else if (state->hand[player][i] == gold)
branch  0 taken 0%
branch  1 taken 100%
        -: 1239:	{
    #####: 1240:	  state->coins += 3;
    #####: 1241:	}	
    30035: 1242:    }	
        -: 1243:
        -: 1244:  //add bonus
     6007: 1245:  state->coins += bonus;
        -: 1246:
     6007: 1247:  return 0;
        -: 1248:}
        -: 1249:
        -: 1250://five action cards functions---------------------------------------------------------------------
        -: 1251:
function adventurer_function called 2000 returned 100% blocks executed 100%
        -: 1252:int adventurer_function(struct gameState *state, int currentPlayer){
     2000: 1253:    int drawntreasure = 0;
        -: 1254:    int cardDrawn;
     2000: 1255:    int z = 1;
        -: 1256:    int temphand[MAX_HAND];
        -: 1257:
    74060: 1258:    while(drawntreasure < 2){
branch  0 taken 95%
branch  1 taken 5%
    35030: 1259:        if(state->deckCount[currentPlayer] < 1)
branch  0 taken 1%
branch  1 taken 99%
       69: 1260:            shuffle(currentPlayer, state);
        -: 1261:
    35030: 1262:        drawCard(currentPlayer, state);
    35030: 1263:        cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];
        -: 1264:
   101090: 1265:        if(cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 taken 96%
branch  1 taken 4%
branch  2 taken 96%
branch  3 taken 4%
branch  4 taken 4%
branch  5 taken 96%
     4000: 1266:             drawntreasure++;
        -: 1267:        else{
    31030: 1268:            temphand[z]=cardDrawn;
    31030: 1269:            state->handCount[currentPlayer]--;
    31030: 1270:            z++;
        -: 1271:        }
        -: 1272:    }
        -: 1273:
    70060: 1274:    while(z-1 >= 0){
branch  0 taken 94%
branch  1 taken 6%
    33030: 1275:        state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1];
    33030: 1276:        z = z - 1;
        -: 1277:    }
        -: 1278:
     2000: 1279:    return 0;
        -: 1280:}
        -: 1281:
function council_room_function called 1 returned 100% blocks executed 100%
        -: 1282:int council_room_function(struct gameState *state, int currentPlayer, int handPos){
        -: 1283:    int i;
        -: 1284:        
        8: 1285:    for(i=0; i<3; i++)
branch  0 taken 75%
branch  1 taken 25%
        3: 1286:        drawCard(currentPlayer, state);
        -: 1287:
        1: 1288:    state->numBuys++;
        -: 1289:
        6: 1290:    for(i=0; i<state->numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33%
        4: 1291:        if(i != currentPlayer)
branch  0 taken 50%
branch  1 taken 50%
        1: 1292:            drawCard(i, state);
        -: 1293:
        1: 1294:    discardCard(handPos, currentPlayer, state, 0); 
        -: 1295:
        1: 1296:    return 0;
        -: 1297:}
        -: 1298:
function remodel_function called 0 returned 0% blocks executed 0%
        -: 1299:int remodel_function(int choice1, int choice2, struct gameState *state, int currentPlayer, int handPos){    
        -: 1300:	int i, j;  
        -: 1301:
    #####: 1302:    j = state->hand[currentPlayer][choice1]; 
        -: 1303:
    #####: 1304:    if((getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2))
branch  0 never executed
branch  1 never executed
    #####: 1305:        return -1; 
        -: 1306:
    #####: 1307:    gainCard(choice2, state, 0, currentPlayer);
        -: 1308:
    #####: 1309:    discardCard(handPos, currentPlayer, state, 0); 
        -: 1310:
    #####: 1311:    for(i=0; i<state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1312:      if(state->hand[currentPlayer][i] == j){ 
branch  0 never executed
branch  1 never executed
    #####: 1313:			discardCard(i, currentPlayer, state, 0); 
    #####: 1314:			break;
        -: 1315:        }
    #####: 1316:    }
        -: 1317:    
    #####: 1318:	return 0;
    #####: 1319:}
        -: 1320:
function smithy_function called 2001 returned 100% blocks executed 100%
        -: 1321:int smithy_function(struct gameState *state, int currentPlayer, int handPos){
        -: 1322:    int i;
        -: 1323:    
    16008: 1324:	for(i=0; i<3; i++)
branch  0 taken 75%
branch  1 taken 25%
     6003: 1325:        drawCard(currentPlayer, state);
        -: 1326:
     2001: 1327:    discardCard(handPos, currentPlayer, state, 0);
        -: 1328:    
     2001: 1329:	return 0;
        -: 1330:
        -: 1331:}
        -: 1332:
function village_function called 0 returned 0% blocks executed 0%
        -: 1333:int village_function(struct gameState *state, int currentPlayer, int handPos){
    #####: 1334:    drawCard(currentPlayer, state);
        -: 1335:
    #####: 1336:    state->numActions = state->numActions + 3;
        -: 1337:
    #####: 1338:    discardCard(handPos, currentPlayer, state, 0);
        -: 1339:
    #####: 1340:    return 0;
        -: 1341:}
        -: 1342:
        -: 1343://end of dominion.c
        -: 1344:
