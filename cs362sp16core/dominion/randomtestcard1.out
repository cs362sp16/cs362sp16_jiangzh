
***** Random test for steward *****
Error  Time
1       0
2       0
3       0
4       0
******** Random test done ********
File 'dominion.c'
Lines executed:29.06% of 640
dominion.c:creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:5
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:int compare(const void* a, const void* b) {
   632613:    9:  if (*(int*)a > *(int*)b)
    83410:   10:    return 1;
   549203:   11:  if (*(int*)a < *(int*)b)
   230098:   12:    return -1;
   319105:   13:  return 0;
   632613:   14:}
        -:   15:
        -:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
        -:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
        -:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
    10000:   44:  SelectStream(1);
    10000:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
    20000:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
    10000:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
   220000:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
  2200000:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
  1900000:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
  1000000:   65:        }
   100000:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
    10000:   73:  if (numPlayers == 2)
        -:   74:    {
     3321:   75:      state->supplyCount[curse] = 10;
     3321:   76:    }
     6679:   77:  else if (numPlayers == 3)
        -:   78:    {
     3338:   79:      state->supplyCount[curse] = 20;
     3338:   80:    }
        -:   81:  else
        -:   82:    {
     3341:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
    10000:   87:  if (numPlayers == 2)
        -:   88:    {
     3321:   89:      state->supplyCount[estate] = 8;
     3321:   90:      state->supplyCount[duchy] = 8;
     3321:   91:      state->supplyCount[province] = 8;
     3321:   92:    }
        -:   93:  else
        -:   94:    {
     6679:   95:      state->supplyCount[estate] = 12;
     6679:   96:      state->supplyCount[duchy] = 12;
     6679:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
    10000:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
    10000:  102:  state->supplyCount[silver] = 40;
    10000:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
   420000:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
  3300000:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:	{
  1550000:  110:	  if (kingdomCards[j] == i)
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
   200000:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:		{
    10000:  115:		  if (numPlayers == 2){ 
     3321:  116:		    state->supplyCount[i] = 8; 
     3321:  117:		  }
     6679:  118:		  else{ state->supplyCount[i] = 12; }
    10000:  119:		}
        -:  120:	      else
        -:  121:		{
    90000:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
   100000:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
  1450000:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
  1450000:  130:	}
        -:  131:
   200000:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
    80040:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:    {
    30020:  140:      state->deckCount[i] = 0;
   240160:  141:      for (j = 0; j < 3; j++)
        -:  142:	{
    90060:  143:	  state->deck[i][j] = estate;
    90060:  144:	  state->deckCount[i]++;
    90060:  145:	}
   480320:  146:      for (j = 3; j < 10; j++)
        -:  147:	{
   210140:  148:	  state->deck[i][j] = copper;
   210140:  149:	  state->deckCount[i]++;		
   210140:  150:	}
    30020:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
    80040:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:    {
    30020:  156:      if ( shuffle(i, state) < 0 )
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
    30020:  160:    }
        -:  161:
        -:  162:  //draw player hands
    80040:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
    30020:  166:      state->handCount[i] = 0;
    30020:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
    30020:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
   560000:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:    {
   270000:  178:      state->embargoTokens[i] = 0;
   270000:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
    10000:  182:  state->outpostPlayed = 0;
    10000:  183:  state->phase = 0;
    10000:  184:  state->numActions = 1;
    10000:  185:  state->numBuys = 1;
    10000:  186:  state->playedCardCount = 0;
    10000:  187:  state->whoseTurn = 0;
    10000:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
   120000:  192:  for (it = 0; it < 5; it++){
    50000:  193:    drawCard(state->whoseTurn, state);
    50000:  194:  }
        -:  195:
    10000:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
    10000:  198:  return 0;
    10000:  199:}
        -:  200:
        -:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
    30393:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
    30393:  209:  if (state->deckCount[player] < 1)
      178:  210:    return -1;
    30215:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
   753956:  214:  while (state->deckCount[player] > 0) {
   346763:  215:    card = floor(Random() * state->deckCount[player]);
   346763:  216:    newDeck[newDeckPos] = state->deck[player][card];
   346763:  217:    newDeckPos++;
  7969934:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
  3638204:  219:      state->deck[player][i] = state->deck[player][i+1];
  3638204:  220:    }
   346763:  221:    state->deckCount[player]--;
        -:  222:  }
   753956:  223:  for (i = 0; i < newDeckPos; i++) {
   346763:  224:    state->deck[player][i] = newDeck[i];
   346763:  225:    state->deckCount[player]++;
   346763:  226:  }
        -:  227:
    30215:  228:  return 0;
    30393:  229:}
        -:  230:
        -:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:	
    #####:  269:  return 0;
    #####:  270:}
        -:  271:
        -:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
    #####:  309:}
        -:  310:
        -:  311:int numHandCards(struct gameState *state) {
    18678:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
        -:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
        -:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
        -:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
    #####:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
    #####:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
    #####:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
        -:  346:int whoseTurn(struct gameState *state) {
    28678:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
        -:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
    #####:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
    #####:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
    #####:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
        -:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
        -:  405:	{
    #####:  406:	  j++;
    #####:  407:	}
    #####:  408:    }
    #####:  409:  if ( j >= 3)
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
    #####:  415:}
        -:  416:
        -:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
        -:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
        -:  468:	{
    #####:  469:	  players[i] = -9999;
    #####:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
    #####:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
        -:  482:	{
    #####:  483:	  j = i;
    #####:  484:	}
    #####:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
        -:  493:	{
    #####:  494:	  players[i]++;
    #####:  495:	}
    #####:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
        -:  503:	{
    #####:  504:	  j = i;
    #####:  505:	}
    #####:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
        -:  513:	{
    #####:  514:	  players[i] = 1;
    #####:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
    #####:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
        -:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
   129728:  528:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    93516:  533:    for (i = 0; i < state->discardCount[player];i++){
    46563:  534:      state->deck[player][i] = state->discard[player][i];
    46563:  535:      state->discard[player][i] = -1;
    46563:  536:    }
        -:  537:
      195:  538:    state->deckCount[player] = state->discardCount[player];
      195:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
      195:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
      195:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
      195:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
      195:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
      195:  559:    if (deckCounter == 0)
    #####:  560:      return -1;
        -:  561:
      195:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
      195:  563:    state->deckCount[player]--;
      195:  564:    state->handCount[player]++;//Increment hand count
      195:  565:  }
        -:  566:
        -:  567:  else{
   129533:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
   129533:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
   129533:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
   129533:  576:    state->deckCount[player]--;
   129533:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
   129728:  580:  return 0;
   129728:  581:}
        -:  582:
        -:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:  switch( cardNumber ) 
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
    #####:  644:}
        -:  645:
        -:  646:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  647:{
        -:  648:  int i;
        -:  649:  int j;
        -:  650:  int k;
        -:  651:  int x;
        -:  652:  int index;
    10000:  653:  int currentPlayer = whoseTurn(state);
    10000:  654:  int nextPlayer = currentPlayer + 1;
        -:  655:  int temphand[MAX_HAND];
    10000:  656:  int tributeRevealedCards[2] = {-1, -1};
        -:  657:  
    10000:  658:if (nextPlayer > (state->numPlayers - 1)){
     3757:  659:    nextPlayer = 0;
     3757:  660:  }
        -:  661:  
        -:  662:	
        -:  663:  //uses switch to select card and perform actions
    10000:  664:  switch( card ){
        -:  665:    case adventurer:
     4000:  666:		return adventurer_function(state, currentPlayer); 			// This is one of my refactor functions, and definition of it is in the end of program
        -:  667:	
        -:  668:	case council_room:
    #####:  669:		return council_room_function(state, currentPlayer, handPos);     // This is one of my refactor functions, and definition of it is in the end of program
        -:  670:			
        -:  671:
        -:  672:    case feast:
        -:  673:      //gain card with cost up to 5
        -:  674:      //Backup hand
    #####:  675:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  676:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  677:	state->hand[currentPlayer][i] = -1;//Set to nothing
    #####:  678:      }
        -:  679:      //Backup hand
        -:  680:
        -:  681:      //Update Coins for Buy
    #####:  682:      updateCoins(currentPlayer, state, 5);
    #####:  683:      x = 1;//Condition to loop on
    #####:  684:      while( x == 1) {//Buy one card
    #####:  685:	if (supplyCount(choice1, state) <= 0){
        -:  686:	  if (DEBUG)
        -:  687:	    printf("None of that card left, sorry!\n");
        -:  688:
        -:  689:	  if (DEBUG){
        -:  690:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  691:	  }
    #####:  692:	}
    #####:  693:	else if (state->coins < getCost(choice1)){
    #####:  694:	  printf("That card is too expensive!\n");
        -:  695:
        -:  696:	  if (DEBUG){
        -:  697:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  698:	  }
    #####:  699:	}
        -:  700:	else{
        -:  701:
        -:  702:	  if (DEBUG){
        -:  703:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  704:	  }
        -:  705:
    #####:  706:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  707:	  x = 0;//No more buying cards
        -:  708:
        -:  709:	  if (DEBUG){
        -:  710:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  711:	  }
        -:  712:
        -:  713:	}
        -:  714:      }     
        -:  715:
        -:  716:      //Reset Hand
    #####:  717:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  718:	state->hand[currentPlayer][i] = temphand[i];
    #####:  719:	temphand[i] = -1;
    #####:  720:      }
        -:  721:      //Reset Hand
        -:  722:      			
    #####:  723:      return 0;
        -:  724:			
        -:  725:    case gardens:
    #####:  726:      return -1;
        -:  727:			
        -:  728:    case mine:
    #####:  729:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  730:
    #####:  731:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  732:	{
    #####:  733:	  return -1;
        -:  734:	}
        -:  735:		
    #####:  736:      if (choice2 > treasure_map || choice2 < curse)
        -:  737:	{
    #####:  738:	  return -1;
        -:  739:	}
        -:  740:
    #####:  741:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  742:	{
    #####:  743:	  return -1;
        -:  744:	}
        -:  745:
    #####:  746:      gainCard(choice2, state, 2, currentPlayer);
        -:  747:
        -:  748:      //discard card from hand
    #####:  749:      discardCard(handPos, currentPlayer, state, 0);
        -:  750:
        -:  751:      //discard trashed card
    #####:  752:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  753:	{
    #####:  754:	  if (state->hand[currentPlayer][i] == j)
        -:  755:	    {
    #####:  756:	      discardCard(i, currentPlayer, state, 0);			
    #####:  757:	      break;
        -:  758:	    }
    #####:  759:	}
        -:  760:			
    #####:  761:      return 0;
        -:  762:    
        -:  763:	case remodel:
    #####:  764:    	return remodel_function(choice1, choice2, state, currentPlayer, handPos);   // This is one of my refactor functions, and definition of it is in the end of program
        -:  765:
        -:  766:	case smithy:
     2000:  767:		return smithy_function(state, currentPlayer, handPos);						 // This is one of my refactor functions, and definition of it is in the end of program
        -:  768:			
        -:  769:	case village:
    #####:  770:		return village_function(state, currentPlayer, handPos);						 // This is one of my refactor functions, and definition of it is in the end of program
        -:  771:
        -:  772:	case baron:
    #####:  773:      state->numBuys++;//Increase buys by 1!
    #####:  774:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  775:	int p = 0;//Iterator for hand!
    #####:  776:	int card_not_discarded = 1;//Flag for discard set!
    #####:  777:	while(card_not_discarded){
    #####:  778:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  779:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  780:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  781:	    state->discardCount[currentPlayer]++;
    #####:  782:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  783:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
    #####:  784:	    }
    #####:  785:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  786:	    state->handCount[currentPlayer]--;
    #####:  787:	    card_not_discarded = 0;//Exit the loop
    #####:  788:	  }
    #####:  789:	  else if (p > state->handCount[currentPlayer]){
        -:  790:	    if(DEBUG) {
        -:  791:	      printf("No estate cards in your hand, invalid choice\n");
        -:  792:	      printf("Must gain an estate if there are any\n");
        -:  793:	    }
    #####:  794:	    if (supplyCount(estate, state) > 0){
    #####:  795:	      gainCard(estate, state, 0, currentPlayer);
    #####:  796:	      state->supplyCount[estate]--;//Decrement estates
    #####:  797:	      if (supplyCount(estate, state) == 0){
    #####:  798:		isGameOver(state);
    #####:  799:	      }
    #####:  800:	    }
    #####:  801:	    card_not_discarded = 0;//Exit the loop
    #####:  802:	  }
        -:  803:			    
        -:  804:	  else{
    #####:  805:	    p++;//Next card
        -:  806:	  }
        -:  807:	}
    #####:  808:      }
        -:  809:			    
        -:  810:      else{
    #####:  811:	if (supplyCount(estate, state) > 0){
    #####:  812:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  813:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  814:	  if (supplyCount(estate, state) == 0){
    #####:  815:	    isGameOver(state);
    #####:  816:	  }
    #####:  817:	}
        -:  818:      }
        -:  819:	    
        -:  820:      
    #####:  821:      return 0;
        -:  822:		
        -:  823:    case great_hall:
    #####:  824:      drawCard(currentPlayer, state);
        -:  825:			
        -:  826:      //+1 Actions
    #####:  827:      state->numActions++;
        -:  828:			
        -:  829:      //discard card from hand
    #####:  830:      discardCard(handPos, currentPlayer, state, 0);
    #####:  831:      return 0;
        -:  832:		
        -:  833:    case minion:
        -:  834:      //+1 action
    #####:  835:      state->numActions++;
        -:  836:			
        -:  837:      //discard card from hand
    #####:  838:      discardCard(handPos, currentPlayer, state, 0);
        -:  839:			
    #####:  840:      if (choice1)		//+2 coins
        -:  841:	{
    #####:  842:	  state->coins = state->coins + 2;
    #####:  843:	}
        -:  844:			
    #####:  845:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  846:	{
        -:  847:	  //discard hand
    #####:  848:	  while(numHandCards(state) > 0)
        -:  849:	    {
    #####:  850:	      discardCard(handPos, currentPlayer, state, 0);
        -:  851:	    }
        -:  852:				
        -:  853:	  //draw 4
    #####:  854:	  for (i = 0; i < 4; i++)
        -:  855:	    {
    #####:  856:	      drawCard(currentPlayer, state);
    #####:  857:	    }
        -:  858:				
        -:  859:	  //other players discard hand and redraw if hand size > 4
    #####:  860:	  for (i = 0; i < state->numPlayers; i++)
        -:  861:	    {
    #####:  862:	      if (i != currentPlayer)
        -:  863:		{
    #####:  864:		  if ( state->handCount[i] > 4 )
        -:  865:		    {
        -:  866:		      //discard hand
    #####:  867:		      while( state->handCount[i] > 0 )
        -:  868:			{
    #####:  869:			  discardCard(handPos, i, state, 0);
        -:  870:			}
        -:  871:							
        -:  872:		      //draw 4
    #####:  873:		      for (j = 0; j < 4; j++)
        -:  874:			{
    #####:  875:			  drawCard(i, state);
    #####:  876:			}
    #####:  877:		    }
    #####:  878:		}
    #####:  879:	    }
        -:  880:				
    #####:  881:	}
    #####:  882:      return 0;
        -:  883:		
        -:  884:    case steward:
     4000:  885:      if (choice1 == 1)
        -:  886:	{
        -:  887:	  //+2 cards
     1414:  888:	  drawCard(currentPlayer, state);
     1414:  889:	  drawCard(currentPlayer, state);
     1414:  890:	}
     2586:  891:      else if (choice1 == 2)
        -:  892:	{
        -:  893:	  //+2 coins
     1322:  894:	  state->coins = state->coins + 2;
     1322:  895:	}
        -:  896:      else
        -:  897:	{
        -:  898:	  //trash 2 cards in hand
     1264:  899:	  discardCard(choice2, currentPlayer, state, 1);
     1264:  900:	  discardCard(choice3, currentPlayer, state, 1);
        -:  901:	}
        -:  902:			
        -:  903:      //discard card from hand
     4000:  904:      discardCard(handPos, currentPlayer, state, 0);
     4000:  905:      return 0;
        -:  906:		
        -:  907:    case tribute:
    #####:  908:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####:  909:	if (state->deckCount[nextPlayer] > 0){
    #####:  910:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  911:	  state->deckCount[nextPlayer]--;
    #####:  912:	}
    #####:  913:	else if (state->discardCount[nextPlayer] > 0){
    #####:  914:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  915:	  state->discardCount[nextPlayer]--;
    #####:  916:	}
        -:  917:	else{
        -:  918:	  //No Card to Reveal
        -:  919:	  if (DEBUG){
        -:  920:	    printf("No cards to reveal\n");
        -:  921:	  }
        -:  922:	}
    #####:  923:      }
        -:  924:	    
        -:  925:      else{
    #####:  926:	if (state->deckCount[nextPlayer] == 0){
    #####:  927:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####:  928:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  929:	    state->deckCount[nextPlayer]++;
    #####:  930:	    state->discard[nextPlayer][i] = -1;
    #####:  931:	    state->discardCount[nextPlayer]--;
    #####:  932:	  }
        -:  933:			    
    #####:  934:	  shuffle(nextPlayer,state);//Shuffle the deck
    #####:  935:	} 
    #####:  936:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  937:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  938:	state->deckCount[nextPlayer]--;
    #####:  939:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  940:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  941:	state->deckCount[nextPlayer]--;
        -:  942:      }    
        -:  943:		       
    #####:  944:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####:  945:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  946:	state->playedCardCount++;
    #####:  947:	tributeRevealedCards[1] = -1;
    #####:  948:      }
        -:  949:
    #####:  950:      for (i = 0; i <= 2; i ++){
    #####:  951:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####:  952:	  state->coins += 2;
    #####:  953:	}
        -:  954:		    
    #####:  955:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####:  956:	  drawCard(currentPlayer, state);
    #####:  957:	  drawCard(currentPlayer, state);
    #####:  958:	}
        -:  959:	else{//Action Card
    #####:  960:	  state->numActions = state->numActions + 2;
        -:  961:	}
    #####:  962:      }
        -:  963:	    
    #####:  964:      return 0;
        -:  965:		
        -:  966:    case ambassador:
    #####:  967:      j = 0;		//used to check if player has enough cards to discard
        -:  968:
    #####:  969:      if (choice2 > 2 || choice2 < 0)
        -:  970:	{
    #####:  971:	  return -1;				
        -:  972:	}
        -:  973:
    #####:  974:      if (choice1 == handPos)
        -:  975:	{
    #####:  976:	  return -1;
        -:  977:	}
        -:  978:
    #####:  979:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  980:	{
    #####:  981:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -:  982:	    {
    #####:  983:	      j++;
    #####:  984:	    }
    #####:  985:	}
    #####:  986:      if (j < choice2)
        -:  987:	{
    #####:  988:	  return -1;				
        -:  989:	}
        -:  990:
        -:  991:      if (DEBUG) 
        -:  992:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -:  993:
        -:  994:      //increase supply count for choosen card by amount being discarded
    #####:  995:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -:  996:			
        -:  997:      //each other player gains a copy of revealed card
    #####:  998:      for (i = 0; i < state->numPlayers; i++)
        -:  999:	{
    #####: 1000:	  if (i != currentPlayer)
        -: 1001:	    {
    #####: 1002:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    #####: 1003:	    }
    #####: 1004:	}
        -: 1005:
        -: 1006:      //discard played card from hand
    #####: 1007:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1008:
        -: 1009:      //trash copies of cards returned to supply
    #####: 1010:      for (j = 0; j < choice2; j++)
        -: 1011:	{
    #####: 1012:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1013:	    {
    #####: 1014:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1015:		{
    #####: 1016:		  discardCard(i, currentPlayer, state, 1);
    #####: 1017:		  break;
        -: 1018:		}
    #####: 1019:	    }
    #####: 1020:	}			
        -: 1021:
    #####: 1022:      return 0;
        -: 1023:		
        -: 1024:    case cutpurse:
        -: 1025:
    #####: 1026:      updateCoins(currentPlayer, state, 2);
    #####: 1027:      for (i = 0; i < state->numPlayers; i++)
        -: 1028:	{
    #####: 1029:	  if (i != currentPlayer)
        -: 1030:	    {
    #####: 1031:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1032:		{
    #####: 1033:		  if (state->hand[i][j] == copper)
        -: 1034:		    {
    #####: 1035:		      discardCard(j, i, state, 0);
    #####: 1036:		      break;
        -: 1037:		    }
    #####: 1038:		  if (j == state->handCount[i])
        -: 1039:		    {
    #####: 1040:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1041:			{
        -: 1042:			  if (DEBUG)
        -: 1043:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
    #####: 1044:			}	
    #####: 1045:		      break;
        -: 1046:		    }		
    #####: 1047:		}
        -: 1048:					
    #####: 1049:	    }
        -: 1050:				
    #####: 1051:	}				
        -: 1052:
        -: 1053:      //discard played card from hand
    #####: 1054:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1055:
    #####: 1056:      return 0;
        -: 1057:
        -: 1058:		
        -: 1059:    case embargo: 
        -: 1060:      //+2 Coins
    #####: 1061:      state->coins = state->coins + 2;
        -: 1062:			
        -: 1063:      //see if selected pile is in play
    #####: 1064:      if ( state->supplyCount[choice1] == -1 )
        -: 1065:	{
    #####: 1066:	  return -1;
        -: 1067:	}
        -: 1068:			
        -: 1069:      //add embargo token to selected supply pile
    #####: 1070:      state->embargoTokens[choice1]++;
        -: 1071:			
        -: 1072:      //trash card
    #####: 1073:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1074:      return 0;
        -: 1075:		
        -: 1076:    case outpost:
        -: 1077:      //set outpost flag
    #####: 1078:      state->outpostPlayed++;
        -: 1079:			
        -: 1080:      //discard card
    #####: 1081:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1082:      return 0;
        -: 1083:		
        -: 1084:    case salvager:
        -: 1085:      //+1 buy
    #####: 1086:      state->numBuys++;
        -: 1087:			
    #####: 1088:      if (choice1)
        -: 1089:	{
        -: 1090:	  //gain coins equal to trashed card
    #####: 1091:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1092:	  //trash card
    #####: 1093:	  discardCard(choice1, currentPlayer, state, 1);	
    #####: 1094:	}
        -: 1095:			
        -: 1096:      //discard card
    #####: 1097:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1098:      return 0;
        -: 1099:		
        -: 1100:    case sea_hag:
    #####: 1101:      for (i = 0; i < state->numPlayers; i++){
    #####: 1102:	if (i != currentPlayer){
    #####: 1103:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1104:	  state->discardCount[i]++;
    #####: 1105:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    #####: 1106:	}
    #####: 1107:      }
    #####: 1108:      return 0;
        -: 1109:		
        -: 1110:    case treasure_map:
        -: 1111:      //search hand for another treasure_map
    #####: 1112:      index = -1;
    #####: 1113:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1114:	{
    #####: 1115:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1116:	    {
    #####: 1117:	      index = i;
    #####: 1118:	      break;
        -: 1119:	    }
    #####: 1120:	}
    #####: 1121:      if (index > -1)
        -: 1122:	{
        -: 1123:	  //trash both treasure cards
    #####: 1124:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1125:	  discardCard(index, currentPlayer, state, 1);
        -: 1126:
        -: 1127:	  //gain 4 Gold cards
    #####: 1128:	  for (i = 0; i < 4; i++)
        -: 1129:	    {
    #####: 1130:	      gainCard(gold, state, 1, currentPlayer);
    #####: 1131:	    }
        -: 1132:				
        -: 1133:	  //return success
    #####: 1134:	  return 1;
        -: 1135:	}
        -: 1136:			
        -: 1137:      //no second treasure_map found in hand
    #####: 1138:      return -1;
        -: 1139:    }
        -: 1140:	
    #####: 1141:  return -1;
    10000: 1142:}
        -: 1143:
        -: 1144:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1145:{
        -: 1146:	
        -: 1147:  //if card is not trashed, added to Played pile 
     8528: 1148:  if (trashFlag < 1)
        -: 1149:    {
        -: 1150:      //add card to played pile
     6000: 1151:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
     6000: 1152:      state->playedCardCount++;
     6000: 1153:    }
        -: 1154:	
        -: 1155:  //set played card to -1
     8528: 1156:  state->hand[currentPlayer][handPos] = -1;
        -: 1157:	
        -: 1158:  //remove card from player's hand
     8528: 1159:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1160:    {
        -: 1161:      //reduce number of cards in hand
    #####: 1162:      state->handCount[currentPlayer]--;
    #####: 1163:    }
     8528: 1164:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1165:    {
        -: 1166:      //reduce number of cards in hand
    #####: 1167:      state->handCount[currentPlayer]--;
    #####: 1168:    }
        -: 1169:  else 	
        -: 1170:    {
        -: 1171:      //replace discarded card with last card in hand
     8528: 1172:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1173:      //set last card to -1
     8528: 1174:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1175:      //reduce number of cards in hand
     8528: 1176:      state->handCount[currentPlayer]--;
        -: 1177:    }
        -: 1178:	
     8528: 1179:  return 0;
        -: 1180:}
        -: 1181:
        -: 1182:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1183:{
        -: 1184:  //Note: supplyPos is enum of choosen card
        -: 1185:	
        -: 1186:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1187:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1188:    {
    #####: 1189:      return -1;
        -: 1190:    }
        -: 1191:	
        -: 1192:  //added card for [whoseTurn] current player:
        -: 1193:  // toFlag = 0 : add to discard
        -: 1194:  // toFlag = 1 : add to deck
        -: 1195:  // toFlag = 2 : add to hand
        -: 1196:
    #####: 1197:  if (toFlag == 1)
        -: 1198:    {
    #####: 1199:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1200:      state->deckCount[player]++;
    #####: 1201:    }
    #####: 1202:  else if (toFlag == 2)
        -: 1203:    {
    #####: 1204:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1205:      state->handCount[player]++;
    #####: 1206:    }
        -: 1207:  else
        -: 1208:    {
    #####: 1209:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1210:      state->discardCount[player]++;
        -: 1211:    }
        -: 1212:	
        -: 1213:  //decrease number in supply pile
    #####: 1214:  state->supplyCount[supplyPos]--;
        -: 1215:	 
    #####: 1216:  return 0;
    #####: 1217:}
        -: 1218:
        -: 1219:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1220:{
        -: 1221:  int i;
        -: 1222:	
        -: 1223:  //reset coin count
    10000: 1224:  state->coins = 0;
        -: 1225:
        -: 1226:  //add coins for each Treasure card in player's hand
   120000: 1227:  for (i = 0; i < state->handCount[player]; i++)
        -: 1228:    {
    50000: 1229:      if (state->hand[player][i] == copper)
        -: 1230:	{
    30000: 1231:	  state->coins += 1;
    30000: 1232:	}
    20000: 1233:      else if (state->hand[player][i] == silver)
        -: 1234:	{
    #####: 1235:	  state->coins += 2;
    #####: 1236:	}
    20000: 1237:      else if (state->hand[player][i] == gold)
        -: 1238:	{
    #####: 1239:	  state->coins += 3;
    #####: 1240:	}	
    50000: 1241:    }	
        -: 1242:
        -: 1243:  //add bonus
    10000: 1244:  state->coins += bonus;
        -: 1245:
    10000: 1246:  return 0;
        -: 1247:}
        -: 1248:
        -: 1249://five action cards functions---------------------------------------------------------------------
        -: 1250:
        -: 1251:int adventurer_function(struct gameState *state, int currentPlayer){
     4000: 1252:    int drawntreasure = 0;
        -: 1253:    int cardDrawn;
     4000: 1254:    int z = 1;
        -: 1255:    int temphand[MAX_HAND];
        -: 1256:
   149800: 1257:    while(drawntreasure < 2){
    70900: 1258:        if(state->deckCount[currentPlayer] < 1)
      178: 1259:            shuffle(currentPlayer, state);
        -: 1260:
    70900: 1261:        drawCard(currentPlayer, state);
    70900: 1262:        cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];
        -: 1263:
   204692: 1264:        if(cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
     8000: 1265:             drawntreasure++;
        -: 1266:        else{
    62900: 1267:            temphand[z]=cardDrawn;
    62900: 1268:            state->handCount[currentPlayer]--;
    62900: 1269:            z++;
        -: 1270:        }
        -: 1271:    }
        -: 1272:
   141800: 1273:    while(z-1 >= 0){
    66900: 1274:        state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1];
    66900: 1275:        z = z - 1;
        -: 1276:    }
        -: 1277:
     4000: 1278:    return 0;
        -: 1279:}
        -: 1280:
        -: 1281:int council_room_function(struct gameState *state, int currentPlayer, int handPos){
        -: 1282:    int i;
        -: 1283:        
    #####: 1284:    for(i=0; i<3; i++)
    #####: 1285:        drawCard(currentPlayer, state);
        -: 1286:
    #####: 1287:    state->numBuys++;
        -: 1288:
    #####: 1289:    for(i=0; i<state->numPlayers; i++)
    #####: 1290:        if(i != currentPlayer)
    #####: 1291:            drawCard(i, state);
        -: 1292:
    #####: 1293:    discardCard(handPos, currentPlayer, state, 0); 
        -: 1294:
    #####: 1295:    return 0;
        -: 1296:}
        -: 1297:
        -: 1298:int remodel_function(int choice1, int choice2, struct gameState *state, int currentPlayer, int handPos){    
        -: 1299:	int i, j;  
        -: 1300:
    #####: 1301:    j = state->hand[currentPlayer][choice1]; 
        -: 1302:
    #####: 1303:    if((getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2))
    #####: 1304:        return -1; 
        -: 1305:
    #####: 1306:    gainCard(choice2, state, 0, currentPlayer);
        -: 1307:
    #####: 1308:    discardCard(handPos, currentPlayer, state, 0); 
        -: 1309:
    #####: 1310:    for(i=0; i<state->handCount[currentPlayer]; i++){
    #####: 1311:      if(state->hand[currentPlayer][i] == j){ 
    #####: 1312:			discardCard(i, currentPlayer, state, 0); 
    #####: 1313:			break;
        -: 1314:        }
    #####: 1315:    }
        -: 1316:    
    #####: 1317:	return 0;
    #####: 1318:}
        -: 1319:
        -: 1320:int smithy_function(struct gameState *state, int currentPlayer, int handPos){
        -: 1321:    int i;
        -: 1322:    
    16000: 1323:	for(i=0; i<3; i++)
     6000: 1324:        drawCard(currentPlayer, state);
        -: 1325:
     2000: 1326:    discardCard(handPos, currentPlayer, state, 0);
        -: 1327:    
     2000: 1328:	return 0;
        -: 1329:
        -: 1330:}
        -: 1331:
        -: 1332:int village_function(struct gameState *state, int currentPlayer, int handPos){
    #####: 1333:    drawCard(currentPlayer, state);
        -: 1334:
    #####: 1335:    state->numActions = state->numActions + 3;
        -: 1336:
    #####: 1337:    discardCard(handPos, currentPlayer, state, 0);
        -: 1338:
    #####: 1339:    return 0;
        -: 1340:}
        -: 1341:
        -: 1342://end of dominion.c
        -: 1343:
